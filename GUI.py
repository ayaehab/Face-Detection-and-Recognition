# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'task5_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from tracemalloc import start
from PyQt5.QtWidgets import QFileDialog, QLabel
from PyQt5.QtGui import QPixmap
import cv2
import time
from cv2 import CascadeClassifier
from FaceRecog import FaceRecognizer



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setStyleSheet("background-color: rgb(87, 43, 140);\n"
"\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.inputDisplay = QtWidgets.QLabel(self.centralwidget)
        self.inputDisplay.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";\n"
"color: rgb(255, 255, 255);")
        self.inputDisplay.setObjectName("inputDisplay")
        self.horizontalLayout_3.addWidget(self.inputDisplay)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout_3.addItem(spacerItem)
        self.outputDisplay = QtWidgets.QLabel(self.centralwidget)
        self.outputDisplay.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";\n"
"color: rgb(255, 255, 255);")
        self.outputDisplay.setObjectName("outputDisplay")
        self.horizontalLayout_3.addWidget(self.outputDisplay)
        self.gridLayout.addLayout(self.horizontalLayout_3, 3, 0, 1, 1)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.image1_label_3 = QtWidgets.QLabel(self.centralwidget)
        self.image1_label_3.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";\n"
"color: rgb(255, 255, 255);")
        self.image1_label_3.setObjectName("image1_label_3")
        self.horizontalLayout_4.addWidget(self.image1_label_3)
        self.image1_label_4 = QtWidgets.QLabel(self.centralwidget)
        self.image1_label_4.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";\n"
"color: rgb(255, 255, 255);")
        self.image1_label_4.setObjectName("image1_label_4")
        self.horizontalLayout_4.addWidget(self.image1_label_4)
        self.gridLayout.addLayout(self.horizontalLayout_4, 4, 0, 1, 1)
        self.openButton = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Mongolian Baiti")
        font.setPointSize(10)
        self.openButton.setFont(font)
        self.openButton.setStyleSheet("background-color: rgb(237, 202, 239);")
        self.openButton.setObjectName("openButton")
        self.gridLayout.addWidget(self.openButton, 0, 0, 1, 1)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setStyleSheet("color: rgb(255, 255, 255);\n"
"selection-background-color: rgb(170, 170, 255);")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.gridLayout.addWidget(self.comboBox, 1, 0, 1, 1)
        self.timeLabel = QtWidgets.QLabel(self.centralwidget)
        self.timeLabel.setStyleSheet("font: 75 9pt \"MS Shell Dlg 2\";\n"
"color: rgb(255, 255, 255);")
        self.timeLabel.setObjectName("timeLabel")
        self.gridLayout.addWidget(self.timeLabel, 5, 0, 1, 1)
        self.applyButton = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Mongolian Baiti")
        font.setPointSize(10)
        self.applyButton.setFont(font)
        self.applyButton.setStyleSheet("background-color: rgb(237, 202, 239);")
        self.applyButton.setObjectName("applyButton")
        self.gridLayout.addWidget(self.applyButton, 2, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.inputDisplay.setText(_translate("MainWindow", "INPUT"))
        self.outputDisplay.setText(_translate("MainWindow", "RESULT"))
        self.image1_label_3.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt; font-weight:600;\">Input Image</span></p></body></html>"))
        self.image1_label_3.setText(_translate("MainWindow", "Input Image"))
        self.image1_label_4.setText(_translate("MainWindow", "  Output Image"))
        self.openButton.setText(_translate("MainWindow", "Open Image"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Choose method"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Face detection"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Face recognition "))
        self.comboBox.setItemText(3, _translate("MainWindow", "ROC"))
        self.timeLabel.setText(_translate("MainWindow", "Computation Time"))
        self.applyButton.setText(_translate("MainWindow", "Apply"))

        self.openButton.clicked.connect(self.browse_image)
        self.applyButton.clicked.connect(self.getOption)
       

    def browse_image(self):
        self.outputDisplay.setText("RESULT")
        self.timeLabel.setText("Computation Time")
        print('browse button is clicked')
        image = QFileDialog.getOpenFileName(None, 'OpenFile', '', "Image file(*.png *.jpg *.pgm)")
        self.imagePath = image[0]
        self.img = cv2.imread(self.imagePath)
        
        pixmap = QPixmap(self.imagePath)
        self.inputDisplay.setPixmap(pixmap.scaled(400,400))

    def getOption(self):
            option = self.comboBox.currentText()
            if option == 'Face detection':
                print(f'Selected method is {option}')
                faceDetection(self)
            elif option == 'Face recognition ':
                    print(f'Selected method is {option}')
                    rec = FaceRecognizer()
                    start = time.time()
                    rec.create_image_matrix()
                    rec.fit()
                    w = rec.project_newFace_oneigenfaces(self.imagePath)
                    matching_image = rec.similarity(w, 0.9)
                #     print(f'function return--> {matching_image}')
                    print(f'shape ={len(matching_image)}')
                    end = time.time()
                    if matching_image[0] != "unknown Face":
                    
                        pixmap = QPixmap('images2/train/'+str(matching_image[0]))
                        self.outputDisplay.setPixmap(pixmap.scaled(400,400))
                        self.timeLabel.setText('Computation Time= '+str(end - start)+" seconds"+',   '+matching_image[2])
                    else:                                   
                        self.timeLabel.setText('Computation Time= '+str(end - start)+" seconds"+',   Unkown Face')
                        self.outputDisplay.setText('UNKOWN FACE!')
            else:
                    print(f'Selected method is {option}')
                    self.inputDisplay.setText(' ')
                    rec = FaceRecognizer()
                    start = time.time()
                    rec.create_image_matrix()
                    rec.fit()
                    rec.total_ROC('images2/test')
                    pixmap = QPixmap('roc.png')
                    self.outputDisplay.setPixmap(pixmap.scaled(600,500))
                    end = time.time()
                    self.timeLabel.setText('Computation Time= '+str(end - start)+" seconds")



def faceDetection(self):
    start = time.time()
    g_image = cv2.cvtColor(self.img, cv2.COLOR_BGR2GRAY)

    faceCascade = CascadeClassifier(cv2.data.haarcascades+'haarcascade_frontalface_default.xml')

    # The function that detects the faces in the image
    faces = faceCascade.detectMultiScale(
        g_image,
        scaleFactor=1.2,
        minNeighbors=5,
        minSize=(30, 30),
        flags = cv2.CASCADE_SCALE_IMAGE )


    # This will draw a rectangle around the faces
    for (x, y, w, h) in faces:
        cv2.rectangle(self.img, (x, y), (x+w, y+h), (0, 255, 0), 2)

    end = time.time()
    cv2.imwrite('result.png',self.img)
    pixmap = QPixmap('result.png')
    self.outputDisplay.setPixmap(pixmap.scaled(400,400))

    self.timeLabel.setText('Computation Time= '+str(end - start)+" seconds"+',   '+str(len(faces))+ " faces are detected")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())